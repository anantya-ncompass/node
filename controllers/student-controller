const { compressResponse } = require("../utilities/compression");
const { connection } = require("../utilities/connection");
const CustomError = require("../utilities/custom-err");
const { login, studentformat } = require("../utilities/validation");
const { getToken, verifyToken } = require("../utilities/auth");



const create = (req, res, next) => {
  let { id, name, age, contact, marks } = req.body;
  console.log(req.body);
  connection.query(
    "INSERT INTO student VALUES (?,?,?,?,?)",
    [id, name, age, contact, marks],
   async  (err, result) => {
      if (err) {
        next(CustomError.badRequest("Request Error"));
        return;
      }
      if (result.length === 0) {
        next();
        return;
      }
      res.setHeader("Content-Encoding", "gzip");
      res.setHeader("Content-Type", "application/json");
      let val = await compressResponse({
        success: true,
        message: `Fetched ${result.length} records`,
        data: result,
      });
      console.log(val);
      res.status(200).send(val);
    }
  );
};





const delete_data = (req, res) => {
  let { ID } = req.params;
  console.log(ID);
  connection.query(
    `DELETE FROM biodata WHERE NID = ?`,
    [ID],
    (err, results) => {
      if (err || result.affectedRows === 0) {
        res.status(400).json({
          success: err ? false : true,
          message: err ? err.message : `ID NOT FOUND records`,
          data: result,
        });
      }
      res.status(200).json({
        success: true,
        message: `deleted ${result.affectedRows} records`,
        data: result,
      });
    }
  );
  connection.commit();
};


  const read = (req, res) => {
    let  { col_name } = req.body;
    console.log(col_name)
    connection.query(
      `SELECT ${col_name} FROM student;`,
      async (err, result) => {
      if (err || result.length === 0) {
        res.status(400).json({
          success: false,
          message: err ? err.message : "no record found",
          data: result,
        });
        return;
      }
      res.setHeader("Content-Encoding", "gzip");
      res.setHeader("Content-Type", "application/json");
      let val = await compressResponse({
        success: true,
        message: `Fetched ${result.length} records`,
        data: result,
      });
      console.log(val);
      res.status(200).send(val);
  
  
    }
    );
  
    };

//readall
const readAll = (req, res) => {
  let token = req.body.token;
  let val = verifyToken(token, "login");
  console.log(val);
  if (val) {
    connection.query(
      "SELECT * FROM students where id = ?",
      [val],
      async (err, result) => {
        if (err || result.length === 0) {
          res.status(400).json({
            success: err ? false : true,
            message: err ? err.message : "no record found",
            data: result,
          });
          return;
        }
        res.setHeader("Content-Encoding", "gzip");
        res.setHeader("Content-Type", "application/json");
        let val = await compressResponse({
          success: true,
          message: `Fetched ${result.length} records`,
          data: result,
        });
        console.log(val);
        res.status(200).send(val);
      }
    );
  }
};




  const update = (req, res) => {
    let { ID, NAME } = req.params;
    connection.query(
      `update student set student_name = ? where id = ?`,
      [NAME, ID],
      (err, result) => {
        if (err || result.length === 0) {
          res.status(400).json({
            success: err ? false : true,
            message: err
              ? err.message
              : `inserted ${result.affectedRows} records`,
            data: result,
          });
        }
        res.status(200).json({
          success: true,
          message: `Updated ${result.affectedRows} records`,
          data: result,
        });
      }
    );
    connection.commit();
  };
  
  
  
  
  
  
  

  const studentLogin = (req, res) => {
    const { id } = req.body;
    connection.query(
      "SELECT * from students where id = ?",
      [id],
      (err, result) => {
        if (err || result.length === 0) {
          res.status(400).json({
            success: err ? false : true,
            message: err
              ? err.message
              : `inserted records`,
            data: result,
          });
        }
        let token = getToken(id, "login");
        res.status(201).json({
          success: true,
          token: token,
        });
      }
    );
  };

module.exports = { studentLogin, create, delete_data, update, read, readAll };

